import { useState, useEffect, useRef } from 'react'

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Xin ch√†o! üëã\n\nT√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng th·ªùi trang E-Commerce. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ T∆∞ v·∫•n s·∫£n ph·∫©m\n‚Ä¢ H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng\n‚Ä¢ Th√¥ng tin giao h√†ng\n‚Ä¢ Ch√≠nh s√°ch ƒë·ªïi tr·∫£\n‚Ä¢ Khuy·∫øn m√£i hi·ªán t·∫°i\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
      isBot: true,
      timestamp: new Date()
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef(null)

  // T·ª± ƒë·ªông cu·ªôn xu·ªëng khi c√≥ tin nh·∫Øn m·ªõi
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // C√°c c√¢u tr·∫£ l·ªùi t·ª± ƒë·ªông ƒë∆°n gi·∫£n
  const getBotResponse = (userMessage) => {
    const message = userMessage.toLowerCase()
    
    if (message.includes('ch√†o') || message.includes('hello') || message.includes('hi') || message.includes('xin ch√†o')) {
      return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng E-Commerce. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ kh√¥ng ·∫°?"
    }
    
    if (message.includes('s·∫£n ph·∫©m') || message.includes('h√†ng h√≥a') || message.includes('shop')) {
      return "Ch√∫ng t√¥i c√≥ nhi·ªÅu s·∫£n ph·∫©m th·ªùi trang ch·∫•t l∆∞·ª£ng cao. B·∫°n c√≥ th·ªÉ xem t·∫°i trang B·ªô s∆∞u t·∫≠p ho·∫∑c t√¨m ki·∫øm s·∫£n ph·∫©m c·ª• th·ªÉ b·∫±ng thanh t√¨m ki·∫øm."
    }
    
    if (message.includes('giao h√†ng') || message.includes('v·∫≠n chuy·ªÉn') || message.includes('ship')) {
      return "üöö Ch√∫ng t√¥i c√≥ h·ªó tr·ª£ giao h√†ng to√†n qu·ªëc:\n‚Ä¢ Giao h√†ng nhanh t·ª´: 2-3 ng√†y\n‚Ä¢ Mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng tr√™n 500.000ƒë"
    }
    
    if (message.includes('thanh to√°n') || message.includes('payment') || message.includes('tr·∫£ ti·ªÅn')) {
      return "üí≥ Ch√∫ng t√¥i h·ªó tr·ª£ c√°c h√¨nh th·ª©c thanh to√°n nh∆∞:\n‚Ä¢ ZaloPay\n‚Ä¢ COD (Thanh to√°n khi nh·∫≠n h√†ng)"
    }
    
    if (message.includes('li√™n h·ªá') || message.includes('contact') || message.includes('hotline')) {
      return "üìû Li√™n h·ªá v·ªõi ch√∫ng t√¥i:\n‚Ä¢ Hotline: 0904.512.575\n‚Ä¢ Email: contact@gmail.com.com\n‚Ä¢ Ho·∫∑c qua trang Li√™n h·ªá c·ªßa website"
    }
    
    if (message.includes('size') || message.includes('k√≠ch th∆∞·ªõc') || message.includes('s·ªë ƒëo') || message.includes('k√≠ch c·ª°')) {
      return "üìè V·ªÅ size s·∫£n ph·∫©m:\n‚Ä¢ Xem b·∫£ng size chi ti·∫øt t·∫°i m·ªói s·∫£n ph·∫©m\n‚Ä¢ T∆∞ v·∫•n size mi·ªÖn ph√≠\n‚Ä¢ H·ªó tr·ª£ ƒë·ªïi size trong 7 ng√†y"
    }
    
    if (message.includes('ƒë·ªïi tr·∫£') || message.includes('return') || message.includes('ho√†n tr·∫£')) {
      return "üîÑ Ch√≠nh s√°ch ƒë·ªïi tr·∫£:\n‚Ä¢ Th·ªùi gian: 7 ng√†y k·ªÉ t·ª´ khi nh·∫≠n h√†ng\n‚Ä¢ ƒêi·ªÅu ki·ªán: C√≤n nguy√™n tem m√°c, ch∆∞a s·ª≠ d·ª•ng\n‚Ä¢ Mi·ªÖn ph√≠ ƒë·ªïi tr·∫£ l·∫ßn ƒë·∫ßu"
    }
    
    if (message.includes('gi·∫£m gi√°') || message.includes('khuy·∫øn m√£i') || message.includes('sale') || message.includes('voucher')) {
      return "üéâ Khuy·∫øn m√£i hi·ªán t·∫°i:\n‚Ä¢ Gi·∫£m 20% cho kh√°ch h√†ng m·ªõi\n‚Ä¢ Mua 2 t·∫∑ng 1 cho m·ªôt s·ªë s·∫£n ph·∫©m\n‚Ä¢ Flash sale cu·ªëi tu·∫ßn\n‚Ä¢ ƒêƒÉng k√Ω nh·∫≠n tin ƒë·ªÉ c·∫≠p nh·∫≠t ∆∞u ƒë√£i!"
    }
    
    if (message.includes('ƒë∆°n h√†ng') || message.includes('order') || message.includes('mua h√†ng')) {
      return "üì¶ V·ªÅ ƒë∆°n h√†ng:\n‚Ä¢ Theo d√µi ƒë∆°n h√†ng t·∫°i trang ƒê∆°n h√†ng\n‚Ä¢ X√°c nh·∫≠n ƒë∆°n h√†ng qua email/SMS\n‚Ä¢ H·ªó tr·ª£ h·ªßy/s·ª≠a ƒë∆°n tr∆∞·ªõc khi giao"
    }
    
    if (message.includes('t√†i kho·∫£n') || message.includes('ƒëƒÉng k√Ω') || message.includes('login') || message.includes('account') || message.includes('acc')) {
      return "üë§ T√†i kho·∫£n c·ªßa b·∫°n:\n‚Ä¢ ƒêƒÉng k√Ω mi·ªÖn ph√≠ ƒë·ªÉ mua h√†ng\n‚Ä¢ Theo d√µi ƒë∆°n h√†ng d·ªÖ d√†ng\n‚Ä¢ Nh·∫≠n th√¥ng b√°o ∆∞u ƒë√£i ƒë·∫∑c bi·ªát"
    }
    
    // Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh v·ªõi g·ª£i √Ω
    return "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! üòä\n\nT√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:\n‚Ä¢ S·∫£n ph·∫©m v√† mua h√†ng\n‚Ä¢ Giao h√†ng v√† thanh to√°n\n‚Ä¢ ƒê·ªïi tr·∫£ v√† b·∫£o h√†nh\n‚Ä¢ Khuy·∫øn m√£i hi·ªán t·∫°i\n\nHo·∫∑c li√™n h·ªá tr·ª±c ti·∫øp qua trang Li√™n h·ªá nh√©!"
  }

  const handleSendMessage = (e) => {
    e.preventDefault()
    if (!inputMessage.trim()) return

    // Th√™m tin nh·∫Øn c·ªßa user
    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      isBot: false,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, userMessage])
    setInputMessage('')

    // Hi·ªÉn th·ªã typing indicator
    setIsTyping(true)

    // Sau 1-2 gi√¢y th√™m ph·∫£n h·ªìi c·ªßa bot
    setTimeout(() => {
      const botMessage = {
        id: Date.now() + 1,
        text: getBotResponse(inputMessage),
        isBot: true,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botMessage])
      setIsTyping(false)
    }, 1000 + Math.random() * 1000) // Random t·ª´ 1-2 gi√¢y ƒë·ªÉ t·ª± nhi√™n h∆°n
  }

  const formatTime = (timestamp) => {
    return timestamp.toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <>
      {/* N√∫t chat n·ªïi */}
      <div className="fixed bottom-6 right-6 z-50">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-red-500 hover:bg-red-600 text-white rounded-full p-4 shadow-lg transition-all duration-300 transform hover:scale-110"
        >
          {isOpen ? (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          ) : (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
          )}
        </button>
        
        {/* Th√¥ng b√°o c√≥ tin nh·∫Øn m·ªõi */}
        {!isOpen && (
          <div className="absolute -top-2 -left-2 bg-green-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center animate-pulse">
            ‚Ä¢
          </div>
        )}
      </div>

      {/* C·ª≠a s·ªï chat */}
      {isOpen && (
        <div className="fixed bottom-24 right-6 w-80 h-96 bg-white rounded-lg shadow-2xl border z-50 flex flex-col">
          {/* Header */}
          <div className="bg-red-500 text-white p-4 rounded-t-lg flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-red-400 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H11V21H5V3H13V9H21Z"/>
                </svg>
              </div>
              <div>
                <h3 className="font-medium">Chat t∆∞ v·∫•n</h3>
                <p className="text-xs opacity-80">H·ªó tr·ª£ 24/7</p>
              </div>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className="text-white hover:text-gray-200"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-lg ${
                    message.isBot
                      ? 'bg-white text-gray-800 shadow-sm border'
                      : 'bg-red-500 text-white'
                  }`}
                >
                  <p className="text-sm whitespace-pre-line">{message.text}</p>
                  <p className={`text-xs mt-1 ${
                    message.isBot ? 'text-gray-500' : 'text-red-100'
                  }`}>
                    {formatTime(message.timestamp)}
                  </p>
                </div>
              </div>
            ))}
            
            {/* Typing indicator khi bot ƒëang tr·∫£ l·ªùi */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-white text-gray-800 shadow-sm border p-3 rounded-lg">
                  <div className="flex items-center space-x-1">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                    </div>
                    <span className="text-xs text-gray-500 ml-2">ƒêang tr·∫£ l·ªùi...</span>
                  </div>
                </div>
              </div>
            )}
            
            {/* Ph·∫ßn t·ª≠ ƒë·ªÉ cu·ªôn xu·ªëng */}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <form onSubmit={handleSendMessage} className="p-4 border-t bg-white">
            <div className="flex gap-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="Nh·∫≠p n·ªôi dung..."
                className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500"
              />
              <button
                type="submit"
                className="bg-red-500 hover:bg-red-600 text-white p-2 rounded-lg transition-colors flex items-center justify-center"
                disabled={!inputMessage.trim()}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </div>
          </form>
        </div>
      )}
    </>
  )
}

export default Chatbot
